#!/usr/bin/env python3

import argparse
import sys

import pandas

from canids.dataset_utils import pcap_utils
from canids.feature_extractors.basic_netflow_extractor import (
    BasicNetflowFeatureExtractor,
)
from canids.feature_extractors.payl import PaylExtractor
from canids.feature_extractors.payload_flows import NetflowPayloadAnalyser
from canids.transformers import OneHotEncoder
from canids.types import TrafficSequence


class PcapTrafficReader:
    def read(self, pcap_file):
        return TrafficSequence(
            name=pcap_file,
            is_consistent=False,
            ids=[],
            labels=pandas.Series(dtype=float),
            packet_reader=pcap_utils.read_pcap_pcapng(
                pcap_file, print_progress_after=200
            ),
        )


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-p", "--pcap", help="Pcap file to read", required=True)
    parser.add_argument(
        "-o", "--output", help="CSV output file to write", required=True
    )
    parser.add_argument(
        "--payloads",
        help="Analyse payloads with NetflowPayloadAnalyser. It creates an own feature with the frequency for every "
        "byte in a payload.",
        action="store_true",
    )
    parser.add_argument(
        "--payl", help="Analyse payloads with PAYL.", action="store_true"
    )
    parser.add_argument(
        "--one-hot", help="Onehot-encode categorial features", action="store_true"
    )

    fe_class = BasicNetflowFeatureExtractor
    if "--payloads" in sys.argv:
        fe_class = NetflowPayloadAnalyser
    if "--payl" in sys.argv:
        fe_class = PaylExtractor

    fe_class.init_parser(parser)
    parsed = parser.parse_args()
    fe = fe_class.init_by_parsed(parsed)

    traffic = PcapTrafficReader().read(parsed.pcap)
    features = fe.fit_extract(traffic)
    if parsed.one_hot:
        onehot_encoder = OneHotEncoder()
        features = onehot_encoder.fit_transform(features)
    df = features.as_pandas()
    df.to_csv(parsed.output)
    print(df)
    print("Wrote to %s" % parsed.output)


if __name__ == "__main__":
    main()
